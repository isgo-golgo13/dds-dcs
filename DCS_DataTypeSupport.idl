#include "DCS_Data.idl"

#include "dds/DdsDcpsInfrastructure.idl"
#include "dds/DdsDcpsPublication.idl"
#include "dds/DdsDcpsSubscriptionExt.idl"
#include "dds/DdsDcpsTopic.idl"
#include "dds/DdsDcpsTypeSupportExt.idl"
/* Generated by /usr/local/DDS/bin/opendds_idl running on input file DCS_Data.idl */


/* Begin MODULE: DCS */



/* Begin TYPEDEF: OctetSeq */


/* End TYPEDEF: OctetSeq */


/* Begin STRUCT: DCS_DataDiff */

module DCS {
#pragma DCPS_SUPPORT_ZERO_COPY_READ
#pragma DCPS_GEN_ZERO_COPY_READ
//typedef sequence<DCS::DCS_DataDiff> DCS_DataDiffSeq;
native DCS_DataDiffSeq;

/** Support topic registartion for DCS_DataDiff data type.
 *
 * See the DDS specification, OMG formal/04-12-02, for a description of
 * this interface.
 */
local interface DCS_DataDiffTypeSupport : OpenDDS::DCPS::TypeSupport {
    DDS::ReturnCode_t register_type(
                in DDS::DomainParticipant participant,
                in string type_name);

    string get_type_name ();
};

/** DataWriter interface for DCS_DataDiff data type.
 *
 * See the DDS specifications, OMG formal/04-12-02 and formal/07-01-01,
 * for a description of this interface.
 */
local interface DCS_DataDiffDataWriter : DDS::DataWriter {
    DDS::InstanceHandle_t register_instance(
                in DCS::DCS_DataDiff instance);

    DDS::InstanceHandle_t register_instance_w_timestamp(
                in DCS::DCS_DataDiff instance,
                in DDS::InstanceHandle_t handle,
                in DDS::Time_t timestamp);

    DDS::ReturnCode_t unregister_instance(
                in DCS::DCS_DataDiff instance,
                in DDS::InstanceHandle_t handle);

    DDS::ReturnCode_t unregister_instance_w_timestamp(
                in DCS::DCS_DataDiff instance,
                in DDS::InstanceHandle_t handle,
                in DDS::Time_t timestamp);

    //WARNING: If the handle is non-nil and the instance is not registered
    //         then this operation may cause an access violation.
    //         This lack of safety helps performance.
    DDS::ReturnCode_t write(
                in DCS::DCS_DataDiff instance_data,
                in DDS::InstanceHandle_t handle);

    //WARNING: If the handle is non-nil and the instance is not registered
    //         then this operation may cause an access violation.
    //         This lack of safety helps performance.
    DDS::ReturnCode_t write_w_timestamp(
                in DCS::DCS_DataDiff instance_data,
                in DDS::InstanceHandle_t handle,
                in DDS::Time_t source_timestamp);

    DDS::ReturnCode_t dispose(
                in DCS::DCS_DataDiff instance_data,
                in DDS::InstanceHandle_t instance_handle);

    DDS::ReturnCode_t dispose_w_timestamp(
                in DCS::DCS_DataDiff instance_data,
                in DDS::InstanceHandle_t instance_handle,
                in DDS::Time_t source_timestamp);

    DDS::ReturnCode_t get_key_value(
                inout DCS::DCS_DataDiff key_holder,
                in DDS::InstanceHandle_t handle);

    DDS::InstanceHandle_t lookup_instance(
                in DCS::DCS_DataDiff instance_data);
};

/** DataReader interface for DCS_DataDiff data type.
 *
 * See the DDS specification, OMG formal/04-12-02, for a description of
 * this interface.
 */
local interface DCS_DataDiffDataReader : OpenDDS::DCPS::DataReaderEx {
    DDS::ReturnCode_t read(
                inout DCS_DataDiffSeq received_data,
                inout DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in DDS::SampleStateMask sample_states,
                in DDS::ViewStateMask view_states,
                in DDS::InstanceStateMask instance_states);

    DDS::ReturnCode_t take(
                inout DCS_DataDiffSeq received_data,
                inout DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in DDS::SampleStateMask sample_states,
                in DDS::ViewStateMask view_states,
                in DDS::InstanceStateMask instance_states);

    DDS::ReturnCode_t read_w_condition(
                inout DCS_DataDiffSeq data_values,
                inout DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in DDS::ReadCondition a_condition);

    DDS::ReturnCode_t take_w_condition(
                inout DCS_DataDiffSeq data_values,
                inout DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in DDS::ReadCondition a_condition);

    DDS::ReturnCode_t read_next_sample(
                inout DCS::DCS_DataDiff received_data,
                inout DDS::SampleInfo sample_info);

    DDS::ReturnCode_t take_next_sample(
                inout DCS::DCS_DataDiff received_data,
                inout DDS::SampleInfo sample_info);

    DDS::ReturnCode_t read_instance(
                inout DCS_DataDiffSeq received_data,
                inout DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in DDS::InstanceHandle_t a_handle,
                in DDS::SampleStateMask sample_states,
                in DDS::ViewStateMask view_states,
                in DDS::InstanceStateMask instance_states);

    DDS::ReturnCode_t take_instance(
                inout DCS_DataDiffSeq received_data,
                inout DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in DDS::InstanceHandle_t a_handle,
                in DDS::SampleStateMask sample_states,
                in DDS::ViewStateMask view_states,
                in DDS::InstanceStateMask instance_states);

    DDS::ReturnCode_t read_next_instance(
                inout DCS_DataDiffSeq received_data,
                inout DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in DDS::InstanceHandle_t a_handle,
                in DDS::SampleStateMask sample_states,
                in DDS::ViewStateMask view_states,
                in DDS::InstanceStateMask instance_states);

    DDS::ReturnCode_t take_next_instance(
                inout DCS_DataDiffSeq received_data,
                inout DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in DDS::InstanceHandle_t a_handle,
                in DDS::SampleStateMask sample_states,
                in DDS::ViewStateMask view_states,
                in DDS::InstanceStateMask instance_states);

    DDS::ReturnCode_t read_next_instance_w_condition(
                inout DCS_DataDiffSeq data_values,
                inout DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in DDS::InstanceHandle_t previous_handle,
                in DDS::ReadCondition a_condition);

    DDS::ReturnCode_t take_next_instance_w_condition(
                inout DCS_DataDiffSeq data_values,
                inout DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in DDS::InstanceHandle_t previous_handle,
                in DDS::ReadCondition a_condition);

    DDS::ReturnCode_t return_loan(
                inout DCS_DataDiffSeq received_data,
                inout DDS::SampleInfoSeq info_seq);

    DDS::ReturnCode_t get_key_value(
                inout DCS::DCS_DataDiff key_holder,
                in DDS::InstanceHandle_t handle);

    DDS::InstanceHandle_t lookup_instance(
                in DCS::DCS_DataDiff instance_data);
};
};

/* End STRUCT: DCS_DataDiff */

/* End MODULE: DCS */
